from django.http import HttpResponseForbidden
from django.shortcuts import redirect
from functools import wraps

def role_required(allowed_roles=None):
    """
    D√©corateur pour restreindre l'acc√®s en fonction du r√¥le.
    Permet un acc√®s complet √† tout Superutilisateur (Boss/Propri√©taire).
    """
    if allowed_roles is None:
        allowed_roles = []
        
    def decorator(view_func):
        @wraps(view_func)
        def wrapper_func(request, *args, **kwargs):
            if not request.user.is_authenticated:
                return redirect('users:login') 
            
            # üåü Le Superuser (Boss) a acc√®s √† TOUT sans v√©rification de r√¥le.
            if request.user.is_superuser:
                return view_func(request, *args, **kwargs)

            # Reste de la v√©rification pour le personnel r√©gulier
            if hasattr(request.user, 'personnel_profile'):
                user_role = request.user.personnel_profile.role
                
                if user_role in allowed_roles:
                    return view_func(request, *args, **kwargs)
                else:
                    return HttpResponseForbidden("<h1>Acc√®s refus√©.</h1><p>Votre r√¥le ne vous permet pas d'acc√©der √† cette ressource.</p>")
            
            # Utilisateur connect√© sans profil Personnel
            return HttpResponseForbidden("<h1>Acc√®s refus√©.</h1><p>Compte utilisateur non li√© √† un profil personnel valide.</p>") 
            
        return wrapper_func
    return decorator